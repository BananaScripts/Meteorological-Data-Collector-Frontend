name: CI development

on:
  push:
    branches:
      - development
      - Fix/*
      - Feat/*
      - feat/*
      - fix/*
      - main
  pull_request:
    branches:
      - main

jobs:
  build-e-teste:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configurar Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'  

    - name: Instalar Dependências
      run: |
        cd seth
        npm install

    - name: Buildar Projeto
      run: |
        cd seth
        npm run build
    
    - name: Rodar Testes
      run: |
        # Extração  do nome da branch
        BRANCH_NAME=${GITHUB_REF#refs/heads/}

        echo "Nome da branch: $BRANCH_NAME"
  
        # Rodando testes de integração para PRs entre 'development' e 'main'
        if [[ "$GITHUB_BASE_REF" == "main" && "$GITHUB_HEAD_REF" == "development" ]]; then
          echo "Rodando testes de integração da branch development para main"
          cd seth
          npm test -- seth/src/_tests_/integration

        # Rodando testes para a branch 'development' (mas não deve rodar em PR)
        elif [[ "$BRANCH_NAME" == "development" ]]; then
          echo "Rodando testes para branch development"
          cd seth
          npm test -- seth/src/_tests_/unit

        # Rodando testes para branches 'Fix/' ou 'Feat/'
        elif [[ "$BRANCH_NAME" == Feat/* ]] || [[ "$BRANCH_NAME" == Fix/* ]] || [[ "$BRANCH_NAME" == feat/* ]] || [[ "$BRANCH_NAME" == fix/* ]]; then
          FEATURE_TEST_DIR="seth/src/_tests_/unit/tasks/${BRANCH_NAME//\//-}"
          echo "Verificando se os testes existem em: $FEATURE_TEST_DIR"
            
          # Verifica se o diretório de testes da feature existe
          if [ -d "$FEATURE_TEST_DIR" ]; then
            echo "Rodando testes para a branch $BRANCH_NAME em $FEATURE_TEST_DIR"
            cd seth
            npm test -- $FEATURE_TEST_DIR
          else
            echo "Nenhum teste foi encontrado para $BRANCH_NAME. Finalizando."
          fi
        fi

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Autenticar com o Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configurar Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Verificar a autenticação
      run: |
        gcloud auth list
        gcloud config list

    - name: Fazer login no Google Container Registry
      run: gcloud auth configure-docker --quiet
    
    - name: Build e Push da Imagem Docker
      run: |
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/metereological-data-colector .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/metereological-data-colector
    
    - name: Verificar a Imagem Docker
      run: |
         echo "Verificando se a imagem Docker foi empurrada corretamente para o GCR"
         gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/metereological-data-colector --limit=5

    - name: Deploy no Cloud Run
      run: |
        gcloud run deploy metereological-data-colector \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/metereological-data-colector:latest \
          --platform managed \
          --region southamerica-east1 \
          --allow-unauthenticated \
          --timeout 3600 \
          --set-env-vars PORT=8080